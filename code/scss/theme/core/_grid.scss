/**
 * GRID SYSTEM, THEME-SIDE
 * based on:
 * - https://css-tricks.com/dont-overthink-flexbox-grids/
 * - https://getbootstrap.com/docs/4.1/layout/grid/
 * - http://hugeinc.github.io/flexboxgrid-sass/
 */

// in-file config tokens
$grid-columns: 12 !default;
$grid-gutters: (
	xs: (16px, 20px), // >=360px MID:16px EDGE:20px
	// sm >=600px doesn't have own grid
	md: (16px, 32px), // >=768px MID:16px EDGE:32px
	lg: (16px, 40px), // >=1024px MID:16px EDGE:40px
	xl: (32px, 39px), // >=1366px MID:32px EDGE:39px
	xxl: (40px, 32px), // >=1440px MID:40px EDGE:32px
	xxxl: (48px, 120px) // >=1920px MID:48px EDGE:120px
) !default;

// in-file helper tokens
$grid-rem-to-px: 16 !default;

// base container for grid
.row {
	display: flex;
	flex: 0 1 auto;
	flex-direction: row;
	flex-wrap: wrap;

	// container's max width is always 1680px,
	max-width: 1680px;
	margin-left: auto;
	margin-right: auto;
}

// basis for all columns
.col {
	flex-basis: 0;
	flex-grow: 1;
	flex-shrink: 0;
	max-width: 100%;
}

// some utility mixins
@mixin grid-gutters($point) {
	$sizes: map-get($grid-gutters, $point);
	@if ($sizes != null) {
		$mid-gutter: rem(nth($sizes, 1) / 2, $grid-rem-to-px);
		$edge-gutter: rem(nth($sizes, 2), $grid-rem-to-px) - $mid-gutter;

		.row,
		.row.-with-gutters-#{$point} {
			@if ($edge-gutter < 0) {
				// if the edge gutter is less than the internal gutter,
				// then we have to compensate for it by cancelling the
				// padding from previous breakpoints, and adding
				// negative margins so the gutter won't be noticeable
				padding-left: 0;
				padding-right: 0;
				margin-left: $edge-gutter;
				margin-right: $edge-gutter;
			}
			@else {
				padding-left: $edge-gutter;
				padding-right: $edge-gutter;
			}

			.col &:not(.-ignore-parent-grid) {
				// NESTED GRIDS:
				// the new row removes the edge gutters,
				// and cancels out the mid gutter
				@if ($edge-gutter < 0) {
					// it's already canceling itself out,
					// so we don't need to do anything here.
				}
				@else {
					padding-left: 0;
					padding-right: 0;
					margin-left: -$mid-gutter;
					margin-right: -$mid-gutter;
				}
			}

			.col {
				padding-left: $mid-gutter;
				padding-right: $mid-gutter;
			}
		}
	}
}

// generate everything for breakpoint 0
@include grid-generate-sizes('xs', $grid-columns);
@include grid-generate-utils('xs');
@include grid-gutters('xs');

// generate everything for each breakpoint
@each $point, $size in $breakpoints {
	@include respond-above($point) {
		@include grid-generate-sizes($point, $grid-columns);

		@include grid-generate-utils($point);
		@include grid-gutters($point);
	}
}
